---


- name: Create tempfile directory for certificates
  when: >-
    forksComponentsConfiguration
    | selectattr('certs','defined') | length > 0
  delegate_to: localhost
  tempfile:
    state: directory
  register: forksCertificatesTempfileResult
  changed_when: false

- name: Create certificate temporary subdirectory
  delegate_to: localhost
  file:
    path: "{{ forksCertificatesTempfileResult.path }}/{{ forksCertificateRequirementItem.certs }}"
    state: directory
    mode: 0700
  loop: >-
    {{ forksComponentsConfiguration
    | selectattr('certs', 'defined') }}
  loop_control:
    loop_var: forksCertificateRequirementItem


- name: Find certificate files
  become: true
  delegate_to: "{{ sourceComponent.host }}"
  vars:
    sourceComponent: >-
      {{ (forksComponentsConfiguration
      | selectattr('identifier', 'equalto', forksCertificateRequirementItem.certs))[0] }}
    sourceComponentSystemUsername: >-
      {{ ('username' in sourceComponent)
      | ternary(sourceComponent.username, sourceComponent.fork) }}
    sourceComponentHomeDirectory: >-
      {{ ('home' in sourceComponent)
      | ternary(sourceComponent.home,
      forksUserRootDirectory + '/' + sourceComponentSystemUsername) }}
    sourceConfigurationDirectory: >-
      {{ sourceComponentHomeDirectory }}/{{ ('config' in sourceComponent)
      | ternary(sourceComponent.config, '.'+sourceComponent.fork) }}
  find:
    paths: "{{ sourceConfigurationDirectory }}/mainnet/config/ssl/ca"
  register: certFileFindResult
  loop: >-
    {{ forksComponentsConfiguration
    | selectattr('certs', 'defined') }}
  loop_control:
    loop_var: forksCertificateRequirementItem

- name: Cert files
  debug:
    msg: "{{ certFileFindResult }}"

- name: Convert dict
  set_fact:
    certfiles_map: |
      [ {% for r in certFileFindResult.results %}
      {% for f in r.files|map(attribute='path') %}
      { 'source': '{{ r.forksCertificateRequirementItem.certs }}',
      'path': '{{ f }}',
      'host': '{{ r.forksCertificateRequirementItem.host }}' },
      {% endfor %}
      {% endfor %} ]
- debug: 
    msg: "{{ certfiles_map }}"


- name: Fetch certificate files
  become: true
  delegate_to: "{{ forksCertificateFileItem.host }}"
  fetch:
    src: "{{ forksCertificateFileItem.path }}"
    dest: "{{ forksCertificatesTempfileResult.path }}/{{ forksCertificateFileItem.source }}/"
    flat: true
  loop: "{{ certfiles_map }}"
  loop_control:
    loop_var: forksCertificateFileItem



- name: Check files
  delegate_to: localhost
  command: "find {{ forksCertificatesTempfileResult.path }}"
  register: findResult

- name: Fetched files
  debug:
    msg: "{{ findResult.stdout }}"


# - name: "Add {{ forksComponentIdentifier|capitalize }} farmer CA certs and create new client certs"
#   when: forksComponentComponentType == 'harvester'
#   become: true
#   tags: certificates
#   block:
# 
#     - name: "Ensure {{ forksComponentIdentifier|capitalize }} CA cert(s) local directory"
#       become: true
#       file:
#         path: "{{ forksNodeHomeDirectory }}/.{{ forksComponentIdentifier }}-cacert"
#         state: directory
#         owner: "{{ forksNodeSystemUsername }}"
#         group: "{{ forksNodeSystemUsername }}"
#         mode: 0700
# 
#     - name: "Place {{ forksComponentIdentifier|capitalize }} CA cert(s) in local directory"
#       vars:
#         contextProductStoreAction: restore
#         contextComponentIdentifier: "{{ forksComponentIdentifier }}"
#         contextProductOrganization: "{{ forksVendorIdentifier }}"
#         contextProductLabel: "ca_cert-{{ forkBuildRequirementsDescriptor.farmerAddress }}-{{ forksComponentIdentifier }}" #?
#         contextProductDirectory: "{{ forksNodeHomeDirectory }}/.{{ forksComponentIdentifier }}-cacert/ca"
#         contextSystemUser: "{{ forksNodeSystemUsername }}"
#       include_tasks: productStore.yml

- name: "Create {{ forksComponentIdentifier|capitalize }} new client certs"
  when: forksComponentBuildOption == 'git'
  become_user: "{{ forksNodeSystemUsername }}"
  vars:
    forksComponentIdentifier: >-
      {{ forksComponentItem.identifier }}
    forksComponentForkIdentifier: >-
      {{ forksComponentItem.fork }}
    forksNodeSystemUsername: >-
      {{ ('username' in forksComponentItem)
      | ternary(forksComponentItem.username, forksComponentIdentifier) }}
    forksNodeHomeDirectory: >-
      {{ ('home' in forksComponentItem)
      | ternary(forksComponentItem.home,
      forksUserRootDirectory + '/' + forksNodeSystemUsername) }}
    forksNodeRepositoryIdentifier: >-
      {{ forksRepositoryIdentifierLookupTable[forksComponentForkIdentifier] }}
    forksNodeApplicationDirectoryName: >-
      {{ forksNodeRepositoryIdentifier
      | regex_search('[^/]+$') }}
    forksNodeApplicationDirectory: >-
      {{ forksNodeHomeDirectory }}/.local/share/{{ forksNodeApplicationDirectoryName }}
    forksNodeExecutableName: >-
      {{ ('executable' in forksComponentItem)
      | ternary(forksComponentItem.executable, forksComponentIdentifier) }}
    forksComponentBuildOption: >-
      {{ ('build' in forksComponentItem)
      | ternary(forksComponentItem.build, 'git') }}
  shell: >
    . {{ forksNodeApplicationDirectory }}/venv/bin/activate
    && {{ forksNodeExecutableName }} init
    -c {{ forksCertificatesTempfileResult.path }}/{{ forksComponentIdentifier }}
  args:
    chdir: "{{ forksNodeApplicationDirectory }}"
    executable: /bin/bash
  loop: >-
    {{ forksComponentsConfiguration
    | selectattr('certs', 'defined') }}
  loop_control:
    loop_var: forksComponentItem


...
